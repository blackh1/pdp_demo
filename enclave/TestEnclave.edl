/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* TestEnclave.edl - Top EDL file. */

enclave {
    
from "sgx_tsgxssl.edl" import *;
from "sgx_pthread.edl" import *;
    /* 
     * uprint - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */

    include "../app/pdp.h"
    untrusted {
        void uprint([in, string] const char *str);
        int pdp_tag_file([user_check] char *filepath, size_t filepath_len,[user_check] char *tagfilepath, size_t tagfilepath_len);
        
        PDP_challenge *pdp_challenge_file(unsigned int numfileblocks);
        
        PDP_proof *pdp_prove_file([user_check] char *filepath, size_t filepath_len,[user_check] char *tagfilepath, size_t tagfilepath_len,[user_check] PDP_challenge *challenge,[user_check] PDP_key *key);
        
        int pdp_verify_file([user_check] PDP_challenge *challenge,[user_check] PDP_proof *proof);
        
        int pdp_challenge_and_verify_file([user_check] char *filepath, size_t filepath_len,[user_check] char *tagfilepath, size_t tagfilepath_len);
        
        PDP_tag *read_pdp_tag([user_check] FILE *tagfile, unsigned int index);
        
        PDP_tag *pdp_tag_block([user_check] PDP_key *key,[user_check] unsigned char *block, size_t blocksize, unsigned int index);
        
        PDP_challenge *pdp_challenge([user_check] PDP_key *key, unsigned int numfileblocks);
        
        PDP_proof *pdp_generate_proof_update([user_check] PDP_key *key,[user_check] PDP_challenge *challenge,[user_check] PDP_tag *tag,[user_check] PDP_proof *proof,[user_check] unsigned char *block, size_t blocksize, unsigned int j);
        
        PDP_proof *pdp_generate_proof_final([user_check] PDP_key *key,[user_check] PDP_challenge *challenge,[user_check] PDP_proof *proof);

        int pdp_verify_proof([user_check] PDP_key *key,[user_check] PDP_challenge *challenge,[user_check] PDP_proof *proof);

        PDP_key *pdp_create_new_keypair();

        PDP_key *pdp_get_keypair();

        PDP_key *pdp_get_pubkey();

        PDP_key *generate_pdp_key();

        void destroy_pdp_key([user_check] PDP_key *key);

        void sfree([user_check] void *ptr, size_t size);

        PDP_challenge *sanitize_pdp_challenge([user_check] PDP_challenge *challenge);

        unsigned int *generate_prp_pi([user_check] PDP_challenge *challenge);
        
        unsigned char *generate_H([user_check] BIGNUM *input,[user_check] size_t *H_result_size);
        
        unsigned char *generate_prf_f([user_check] PDP_challenge *challenge, unsigned int j,[user_check] size_t *prf_result_size);
        
        unsigned char *generate_prf_w([user_check] PDP_key *key, unsigned int index,[user_check] size_t *prf_result_size);
        
        BIGNUM *generate_fdh_h([user_check] PDP_key *key,[user_check] unsigned char *index_prf, size_t index_prf_size);

        PDP_generator *pick_pdp_generator([user_check] BIGNUM *n);

        void destroy_pdp_generator([user_check] PDP_generator *g);

        PDP_tag *generate_pdp_tag();
        
        void destroy_pdp_tag([user_check] PDP_tag *tag);

        PDP_challenge *generate_pdp_challenge();
        
        void destroy_pdp_challenge([user_check] PDP_challenge *challenge);

        PDP_proof *generate_pdp_proof();
        
        void destroy_pdp_proof([user_check] PDP_proof *proof);

    };


    trusted {
        public void test();
        public void ecall_verify([in,out] char **optarg,long st_size);
    };
};
